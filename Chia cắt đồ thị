#include<bits/stdc++.h>
using namespace std;
const int N=1e2+5;
int n,m;
vector<int>List[N];
bool vis[N];
void BFS(int u)
{
    queue<int>q;
    q.push(u);
    vis[u]=1;
    while(!q.empty())
    {
        u=q.front();
        q.pop();
        for(auto x:List[u])
        {
            if(!vis[x])
            {
                vis[x]=1;
                q.push(x);
            }
        }
    }
}
int solve(int u)
{
    memset(vis,0,sizeof(vis));
    int cnt=0;
    vis[u]=1;
    for(int i=1;i<=n;i++)
    {
        if(!vis[i]) BFS(i),cnt++;
    }
    return cnt-1;
}
void solution()
{
    cin>>n>>m;
    for(int i=1;i<=n;i++) List[i].clear();
    for(int i=1;i<=m;i++)
    {
        int x,y;
        cin>>x>>y;
        List[x].push_back(y);
        List[y].push_back(x);
    }
    int u=0,d=0;
    for(int i=1;i<=n;i++)
    {
        int s=solve(i);
        if(s>d)
        {
            d=s;
            u=i;
        }
    }
    cout<<u<<endl;
}
int main()
{
    int t;
    cin>>t;
    while(t--)
    {
        solution();
    }
    return 0;
}
