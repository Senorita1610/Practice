#include<bits/stdc++.h>
using namespace std;
const int MAX=100;
const int MAXC=1001;
const int MAXT=100100;
long long TLab[MAX];
int TTrace[MAX];
int c[MAX][MAX];
int s1,f1,s2,f2,n,m;
long long d[MAX],d1[MAX],d2[MAX],d3[MAX],d4[MAX];
int Trace[MAX];
int Path[MAX];
int nPath;
long long TM,Time1,Time2;
int Position;
void Dijkstra(int Start,long long d[MAX])
{
	int p,v;
	long long MIN;
	bool Free[MAX];
	for(int v=1;v<=n;v++)
	{
		d[v]=MAXT;
	}
	memset(Free,true,sizeof(Free));
	d[Start]=0;
	while(1)
	{
		p=0;
		MIN=MAXT;
		for(int v=1;v<=n;v++)
		{
			if(Free[v]&&d[v]<MIN)
			{
				p=v;
				MIN=d[v];
			}
		}
		if(p==0) break;
		Free[p]=false;
		for(int v=1;v<=n;v++)
		{
			if(Free[v]&&(c[p][v]!=MAXC)&&(d[v]>d[p]+c[p][v]))
			{
				d[v]=d[p]+c[p][v];
				Trace[v]=p;
			}
		}
	}
}
void solve()
{
	int u;
	Dijkstra(s1,d1);
	Dijkstra(s2,d2);
	Dijkstra(f1,d3);
	Dijkstra(f2,d4);
	Time1=d1[f1];
	Time2=d2[f2];
	TM=MAXT;
	Position=0;
	for(int u=1;u<=n;u++)
	{
		if((d1[u]+d3[u]==Time1)&&(d2[u]+d4[u]==Time2)&&(d1[u]==d2[u])&&(d1[u]<TM))
		{
			TM=d1[u];
			Position=u;
		}
	}
	if(Position!=0) Dijkstra(Position,d);
}
void result()
{
	int t,i,step;
	if(Position==0){
		cout<<"NO"<<endl;
	}
	else
	{
		cout<<"YES"<<endl;
		for(step=1;step<=2;step++)
		{
			cout<<Time1<<endl;
			t=s1;
			while(t!=Position)
			{
				cout<<t<<" ";
				t=Trace[t];
			}
			cout<<Position<<" ";
			nPath=0;
			t=f1;
			while(t!=Position)
			{
				nPath+=1;
				Path[nPath]=t;
				t=Trace[t];
			}
			for(int i=nPath;i>=1;i--)
			{
				cout<<Path[i]<<" ";
			}
			cout<<endl;
			Time1=Time2;
			s1=s2;
			f1=f2;
		}
		cout<<Position<<endl;
		cout<<TM<<endl;
	}
}
int main()
{
	int u,v,x;
	cin>>n>>m;
	cin>>s1>>f1>>s2>>f2;
	for(int u=1;u<=n;u++)
	{
		for(int v=1;v<=n;v++)
		{
			c[u][v]=MAXC;
		}
	}
	for(int i=1;i<=m;i++)
	{
		cin>>u>>v>>x;
		c[u][v]=c[v][u]=x;
	}
	solve();
	result();
}
